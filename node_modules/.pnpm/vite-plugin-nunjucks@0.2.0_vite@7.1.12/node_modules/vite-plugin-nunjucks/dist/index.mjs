// src/index.ts
import * as path2 from "path";
import nunjucks, { Environment } from "nunjucks";

// src/defaults.ts
import * as path from "path";
var defaultConfigureOptions = {
  noCache: true
};
var defaultPluginOptions = {
  templatesDir: path.resolve(process.cwd(), "src", "html"),
  nunjucksConfigure: defaultConfigureOptions
};

// src/index.ts
var globalVariablesKey = "*";
var src_default = (options = {}) => {
  const env = options.nunjucksEnvironment instanceof Environment ? options.nunjucksEnvironment : createNunjucksEnvironment(options.nunjucksEnvironment || {});
  return {
    name: "nunjucks",
    enforce: "pre",
    handleHotUpdate,
    transformIndexHtml: {
      order: "pre",
      handler: handleTransformHtml
    }
  };
  function createNunjucksEnvironment({ extensions, filters }) {
    options = { ...defaultPluginOptions, ...options };
    const env2 = nunjucks.configure({
      ...defaultConfigureOptions,
      ...options.nunjucksConfigure || {}
    });
    Object.keys(extensions || {}).forEach((name) => env2.addExtension(name, extensions[name]));
    Object.keys(filters || {}).forEach((name) => {
      const filter = filters[name];
      typeof filter === "object" && filter.hasOwnProperty("filter") ? env2.addFilter(name, filter.filter, filter.async) : env2.addFilter(name, filter);
    });
    return env2;
  }
  function handleTransformHtml(html, context) {
    const key = path2.basename(context.path);
    const globalVariables = options.variables?.[globalVariablesKey] || {};
    const templateVariables = options.variables?.[key] || {};
    return new Promise((resolve3, reject) => {
      env.renderString(html, { ...globalVariables, ...templateVariables }, function(err, res) {
        if (err) {
          reject(err);
        } else {
          resolve3(res);
        }
      });
    });
  }
  function handleHotUpdate(context) {
    const filename = path2.resolve(context.file);
    if (!filename.startsWith(options.templatesDir))
      return;
    if (!filename.endsWith(".html") && !filename.endsWith(".njk"))
      return;
    console.info(`Template file ${path2.basename(filename)} has been changed. Sending full-reload.`);
    context.server.ws.send({ type: "full-reload" });
    return [];
  }
};
export {
  src_default as default,
  globalVariablesKey
};
