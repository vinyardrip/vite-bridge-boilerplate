var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default,
  globalVariablesKey: () => globalVariablesKey
});
module.exports = __toCommonJS(src_exports);
var path2 = __toESM(require("path"));
var import_nunjucks = __toESM(require("nunjucks"));

// src/defaults.ts
var path = __toESM(require("path"));
var defaultConfigureOptions = {
  noCache: true
};
var defaultPluginOptions = {
  templatesDir: path.resolve(process.cwd(), "src", "html"),
  nunjucksConfigure: defaultConfigureOptions
};

// src/index.ts
var globalVariablesKey = "*";
var src_default = (options = {}) => {
  const env = options.nunjucksEnvironment instanceof import_nunjucks.Environment ? options.nunjucksEnvironment : createNunjucksEnvironment(options.nunjucksEnvironment || {});
  return {
    name: "nunjucks",
    enforce: "pre",
    handleHotUpdate,
    transformIndexHtml: {
      order: "pre",
      handler: handleTransformHtml
    }
  };
  function createNunjucksEnvironment({ extensions, filters }) {
    options = { ...defaultPluginOptions, ...options };
    const env2 = import_nunjucks.default.configure({
      ...defaultConfigureOptions,
      ...options.nunjucksConfigure || {}
    });
    Object.keys(extensions || {}).forEach((name) => env2.addExtension(name, extensions[name]));
    Object.keys(filters || {}).forEach((name) => {
      const filter = filters[name];
      typeof filter === "object" && filter.hasOwnProperty("filter") ? env2.addFilter(name, filter.filter, filter.async) : env2.addFilter(name, filter);
    });
    return env2;
  }
  function handleTransformHtml(html, context) {
    const key = path2.basename(context.path);
    const globalVariables = options.variables?.[globalVariablesKey] || {};
    const templateVariables = options.variables?.[key] || {};
    return new Promise((resolve3, reject) => {
      env.renderString(html, { ...globalVariables, ...templateVariables }, function(err, res) {
        if (err) {
          reject(err);
        } else {
          resolve3(res);
        }
      });
    });
  }
  function handleHotUpdate(context) {
    const filename = path2.resolve(context.file);
    if (!filename.startsWith(options.templatesDir))
      return;
    if (!filename.endsWith(".html") && !filename.endsWith(".njk"))
      return;
    console.info(`Template file ${path2.basename(filename)} has been changed. Sending full-reload.`);
    context.server.ws.send({ type: "full-reload" });
    return [];
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  globalVariablesKey
});
