module.exports = {
  plugins: {
    "posthtml-responsive-images": {
      // Определяем, какие форматы мы хотим получить на выходе.
      // Плагин сгенерирует <source> для каждого формата в указанном порядке.
      // Исходный формат (jpg/png) будет использован как fallback в теге <img>.
      formats: [
        {
          format: "avif",
          options: {
            quality: 75,
          },
        },
        {
          format: "webp",
          options: {
            quality: 75,
          },
        },
      ],

      // --- НАСТРОЙКИ ДЛЯ ГЕНЕРАЦИИ RESPONSIVE SRCSET ---
      // Чтобы включить генерацию нескольких размеров для адаптивности,
      // раскомментируйте и настройте следующие опции.

      /*
      // Пример настройки srcset:
      // Плагин создаст версии изображения с шириной 480, 960 и 1440px.
      // Вы можете указать здесь любые нужные вам размеры.
      srcset: {
        // Обязательно добавляем '1x' в массив, чтобы сгенерировалась
        // картинка с оригинальной шириной.
        sizes: ['480w', '960w', '1440w', '1x'],
        // Имя файла будет выглядеть как 'image-480.webp', 'image-960.webp' и т.д.
        rename: {
          suffix: (data) => `-${data.width}`,
        },
      },
      */

      /*
      // Пример настройки sizes:
      // Этот атрибут будет автоматически добавлен к тегам <source> и <img>.
      // Он критически важен для браузера, чтобы правильно выбрать изображение из srcset.
      // Этот пример говорит:
      // - на экранах до 640px картинка занимает 100% ширины экрана (100vw).
      // - на экранах шире 640px картинка занимает 640px.
      sizes: '(max-width: 640px) 100vw, 640px',
      */

      // Путь, куда будут складываться обработанные изображения относительно
      // корня папки сборки (dist).
      // Например, если исходник лежал в /src/assets/images/hero.jpg,
      // то результат будет в /dist/assets/images/hero.webp
      publicPath: "/assets/images/",

      // Важно: эта опция гарантирует, что плагин будет работать
      // в связке с vite-plugin-imagetools, который мы установили ранее.
      // Он передает ему задачу по трансформации.
      sharp: {},
    },
  },
};
