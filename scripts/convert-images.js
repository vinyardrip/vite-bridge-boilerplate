/*!
 * =================================================================================================
 * convert-images.js
 * =================================================================================================
 *
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ñ–ª–∞–π–Ω-–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã .webp –∏ .avif.
 * –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–æ–≥ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å–æ–≤.
 *
 * =================================================================================================
 */

import sharp from "sharp";
import { glob } from "glob";
import path from "path";
import fs from "fs/promises";
import ora from "ora";
import chalk from "chalk";

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const SOURCE_DIR = "frontend/src/assets/images-convert/source"; // !–ü–∞–ø–∫–∞, –∫—É–¥–∞ –≤—ã –∑–∞–∫–∏–¥—ã–≤–∞–µ—Ç–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏
const OUTPUT_DIR = "frontend/src/assets/images-convert/result"; // !–ü–∞–ø–∫–∞, –≥–¥–µ –ø–æ—è–≤—è—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤. 80 - —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º.
const WEBP_QUALITY = 80;
const AVIF_QUALITY = 75; // AVIF –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç —á—É—Ç—å –º–µ–Ω—å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–æ–≥–æ –∂–µ –≤–∏–∑—É–∞–ª–∞

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
 */
async function convertImages() {
  console.log(chalk.cyan("--- –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---"));

  const spinner = ora("–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...").start();

  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  await fs.mkdir(SOURCE_DIR, { recursive: true });
  await fs.mkdir(OUTPUT_DIR, { recursive: true });

  const filePaths = await glob(`${SOURCE_DIR}/**/*.{png,jpg,jpeg}`);

  if (filePaths.length === 0) {
    spinner.warn(
      chalk.yellow(
        `–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –ø–∞–ø–∫–µ ${SOURCE_DIR}.`,
      ),
    );
    console.log(
      chalk.yellow(
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã .jpg –∏–ª–∏ .png –≤ —ç—Ç—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.`,
      ),
    );
    console.log(chalk.cyan("--- –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É ---"));
    return;
  }

  let convertedCount = 0;

  for (const filePath of filePaths) {
    const fileName = path.basename(filePath);
    const fileBaseName = path.parse(fileName).name; // –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    spinner.text = `–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é: ${chalk.yellow(fileName)}`;

    try {
      const image = sharp(filePath);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WebP
      await image
        .webp({ quality: WEBP_QUALITY })
        .toFile(path.join(OUTPUT_DIR, `${fileBaseName}.webp`));

      // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ AVIF
      await image
        .avif({ quality: AVIF_QUALITY })
        .toFile(path.join(OUTPUT_DIR, `${fileBaseName}.avif`));

      convertedCount++;
    } catch (err) {
      spinner.fail(chalk.red(`–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ${fileName}.`));
      console.error(err);
    }
  }

  spinner.succeed(chalk.green("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞."));
  console.log("---");
  console.log(
    `‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${chalk.green(convertedCount)}`,
  );
  console.log(`üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É: ${chalk.blue(OUTPUT_DIR)}`);
  console.log(chalk.cyan("--- –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É ---"));
}

convertImages();
